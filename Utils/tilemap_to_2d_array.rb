# Utility for converting Godot TileMaps to and from Ruby 2D arrays

# Given a hashed tile coordinate, returns the x coord of the tile
def x_coord(num)
  x = num%65536
  x -= 65536 if x > 32768
  x
end

# Given a hashed tile coordinate, returns the y coord of the tile
def y_coord(num)
  (num/65536).to_i
end

# Given x and y coordinates, returns a hashed coordinate
def hashed_coord(x, y)
  num = 0
  num += 65536 if x < 0
  num += 65536 * y
  num += x
  num
end

# Given the CSV tile data for a Godot tilemap, returns an array where each entry
# is a hash with the keys :x, :y, and :index
def to_hashed(tile_data)
  tokenized = tile_data.split(",").map{|x| x.to_i}
  tiles = []
  i = 0
  while i < tokenized.length do
    x = x_coord(tokenized[i])
    y = y_coord(tokenized[i])
    index = tokenized[i+1]
    tiles << {x: x, y: y, index: index}
    i += 3
  end
  tiles
end

# Given an array containing hashed tiles (as generated by to_hashed), returns
# a 2D array where each entry in the inner array specifies the tile index at
# that point, or nil if there is no tile. The array is normalized so that the
# top-left tile position is 0,0.
def to_2d_array(tile_hash)
  min_x = tile_hash.min_by{|v|v[:x]}[:x]
  min_y = tile_hash.min_by{|v|v[:y]}[:y]
  map = []
  tile_hash.each do |cell|
    rel_x = cell[:x] - min_x
    rel_y = cell[:y] - min_y
    if map.length < rel_y + 1 || map[rel_y] == nil
      map[rel_y] = []
    end
    map[rel_y][rel_x] = cell[:index]
  end
  map
end

# Given a 2D array representing a tile map, converts it back into a tile_data
# CSV suitable for Godot.
def to_tile_data(map, start_x, start_y)
  tiles = []
  map.each_with_index do |row, y|
    if row == nil
      next
    end
    row.each_with_index do |cell, x|
      if cell == nil
        next
      end
      tiles << "#{hashed_coord(x+start_x, y+start_y)}, #{cell}, 0"
    end
  end

  return tiles.join(", ")
end

# Given a 2D array representing tile IDs, pretty-prints some output.
# Useful for debugging.
def pretty_print(arr)
  arr.each do |row|
    rowstr = ""
    if row == nil
      puts
      next
    end
    row.each do |cell|
      if cell == nil
        rowstr << "   "
      else
        rowstr << ("%3d" % cell)
      end
    end
    puts rowstr
  end
end

